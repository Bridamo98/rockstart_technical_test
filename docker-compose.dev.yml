services:
  database_dev:
    profiles: ["test","run"]
    image: postgres:16
    restart: always
    container_name: database_dev
    ports:
      - "5000:5432"
    environment:
      POSTGRES_PASSWORD: ${DEV_POSTGRES_PASSWORD}
      POSTGRES_USER: ${DEV_POSTGRES_USER}
      POSTGRES_DB: ${DEV_POSTGRES_DB}
    volumes:
      - ./database/dev/persistence/data/postgres-data:/var/lib/postgresql/data
      # - ./database/dev/init:/docker-entrypoint-initdb.d # Another way to init database ( using init.sql)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
  back_migrate:
    profiles: ["test","run"]
    container_name: back_migrate
    build:
      context: ./back/
      target: migrate
      dockerfile: Dockerfile.dev
      args:
        COMMIT_ID: "head"
    environment:
      - DATABASE_URL=${DEV_DATABASE_URL}
    depends_on:
      database_dev:
        condition: service_healthy
  back_dev:
    profiles: ["run", "test"]
    container_name: back_dev
    build:
      context: ./back/
      target: run
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    environment:
      - BACK_ENV=dev
    volumes:
      - ./back:/app
    depends_on:
      back_migrate:
        condition: service_completed_successfully
  back_test:
    profiles: ["test"]
    container_name: back_test
    build:
      context: ./back/
      target: test
      dockerfile: Dockerfile.dev
    environment:
      - BACK_ENV=dev
    depends_on:
      database_dev:
        condition: service_healthy
      back_migrate:
        condition: service_completed_successfully
  back_update_snap:
    profiles: ["test"]
    container_name: back_update_snap
    build:
      context: ./back/
      target: update_snap
      dockerfile: Dockerfile.dev
    environment:
      - BACK_ENV=dev
    volumes:
      - ./back/test/unit/snapshots:/app/test/unit/snapshots
      - ./back/test/integration/snapshots:/app/test/integration/snapshots
    depends_on:
      database_dev:
        condition: service_healthy
      back_migrate:
        condition: service_completed_successfully
  front_dev:
    profiles: ["run"]
    container_name: front_dev
    build:
      context: ./front/
      target: run
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    environment:
      - FRONT_ENV=dev
    volumes:
      - ./front:/app:cached
    depends_on:
      database_dev:
        condition: service_started
      back_dev:
        condition: service_started
  front_test:
    profiles: ["test"]
    container_name: front_test
    build:
      context: ./front/
      target: test
      dockerfile: Dockerfile.dev
    environment:
      - FRONT_ENV=dev
    volumes:
      - ./front:/app:cached
    depends_on:
      database_dev:
        condition: service_started
      back_dev:
        condition: service_started
      back_migrate:
        condition: service_completed_successfully
  front_update_snap:
    profiles: ["test"]
    container_name: front_update_snap
    build:
      context: ./front/
      target: update_snap
      dockerfile: Dockerfile.dev
    environment:
      - FRONT_ENV=dev
    volumes:
      - ./front:/app:cached
    depends_on:
      database_dev:
        condition: service_started
      back_dev:
        condition: service_started
      back_migrate:
        condition: service_completed_successfully